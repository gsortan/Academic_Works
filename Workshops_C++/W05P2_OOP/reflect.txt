///////////////////////////////////////////////////////////////////////////

                              Reflection
                             Workshop - #5
Full Name  : Gordon Tan
Student ID#: 147206221
Email      : gtan16@myseneca.ca
Section    : NAA
Date: June-17th-2023

Authenticity Declaration:

I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

In this workshop I learned that being able to overload the built-in operators of C++ is a powerful tool to use. It can help make your code much more readable and simplify it by overloading something like the basic binary, unary and casting operations. For example you could add two objects together with the + operator and define that specifically as adding up the integer instance variables of each object. It’s a good practice to code these operators in such a way that is logically consistent with what is expected of the operator, I.E. using the + sign should be addition. You can’t introduce new operators in C++ to overload. There are also helper functions which are global functions outside of the class definition that can provide additional assistance to a class and they have loose coupling where it accesses private members of a class through public queries. It's also ideal to use helper operators that don’t change the values of their operands. You can grant friendship to a helper function if you want to grant access to private members of a class and avoid the issue of class bloat although that does come at the disadvantage of piercing encapsulation. The most difficult part for me is remembering the specific syntax for overloading these operators. 