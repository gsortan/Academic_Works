//Gauss blur notes use pascals triangle and weight equals number divided by sum of coefficients ex. 6/64;   1 4 6 4 1 

struct fragment //Fragment shader. Fragments store color only
{
	float4 color : COLOR;
};


fragment main(fragment IN,
		  float2 texCoord : TEXCOORD0,
          uniform sampler2D blurred : TEX0, //Blurred
		  uniform float size, //Box filter size
		  uniform float intensity, //How much bloom there is
		  uniform sampler2D original : TEX1) //Original
{
	fragment OUT;

	/*float blurSize = 1.0f / 1900.0f;
    float4 sum = (0.0f, 0.0f, 0.0f, 0.0f);
    float gauss[5] = {0.2270270270f, 0.1945945946f, 0.1216216216f, 0.0540540541f, 0.0162162162f};
	

    for (int i = 0; i < size; ++i)
	{
        //sum += tex2D(blurred, float2(texCoord.x - 2 * i * blurSize * gauss[0], texCoord.y - 2 * i * blurSize * gauss[0]));
        //sum += tex2D(blurred, float2(texCoord.x - blurSize * i * gauss[1], texCoord.y - blurSize * i * gauss[1]));
        //sum += tex2D(blurred, float2(texCoord.x * i * gauss[2], texCoord.y * i * gauss[2]));
        //sum += tex2D(blurred, float2(texCoord.x + blurSize * i * gauss[3], texCoord.y + blurSize * i * gauss[3])) ;
        //sum += tex2D(blurred, float2(texCoord.x + 2 * i * blurSize * gauss[4], texCoord.y + 2 * i * blurSize * gauss[4]));

		sum += tex2D(blurred, float2(texCoord.x - 2 * i * blurSize, texCoord.y - 2 * i * blurSize));
        sum += tex2D(blurred, float2(texCoord.x - blurSize * i, texCoord.y - blurSize * i));
        sum += tex2D(blurred, float2(texCoord.x * i, texCoord.y * i));
        sum += tex2D(blurred, float2(texCoord.x + blurSize * i, texCoord.y + blurSize * i)) ;
        sum += tex2D(blurred, float2(texCoord.x + 2 * i * blurSize, texCoord.y + 2 * i * blurSize));
    }
	
  
	sum = sum / (5 * size);
    float4 bloomThreshold = float4(intensity, intensity, intensity, intensity);
	float4 d = saturate((sum - bloomThreshold) / (1 - bloomThreshold));*/

	//Edge detectiopn based on the code from http://recreationstudios.blogspot.ca/2010/04/sobel-filter-compute-shader.html
	//Using the Sobel Filter http://en.wikipedia.org/wiki/Sobel_filter

	//float2 temp;

	OUT.color = float4(1.0, 1.0, 1.0, 1.0);

	if (!(texCoord.x < 0.00078125 || texCoord.x > 1 - 0.00078125 //Makes sure you are within the X range and not a frame edge. The big number is from 1 / 1280
		|| texCoord.y < 0.00138888889 || texCoord.y > 1 - 0.00138888889)) //Makes sure you are within the Y range and not a frame edge. The big number is from 1 / 720
	{
		// 00 01 02
		// 10 11 12
		// 20 21 22

		float2 s00 = tex2D(original, texCoord + float2(-0.00078125,		-0.00138888889));
		float2 s01 = tex2D(original, texCoord + float2(0,				-0.00138888889));
		float2 s02 = tex2D(original, texCoord + float2(0.00078125,		-0.00138888889));

		float2 s10 = tex2D(original, texCoord + float2(-0.00078125,		0));
		float2 s12 = tex2D(original, texCoord + float2(0.00078125,		0));

		float2 s20 = tex2D(original, texCoord + float2(-0.00078125,		0.00138888889));
		float2 s21 = tex2D(original, texCoord + float2(0,				0.00138888889));
		float2 s22 = tex2D(original, texCoord + float2(0.00078125,		0.00138888889));

		float2 sobelX = s00 + float2(2.0, 2.0) * s10 + s20 - s02 - float2(2.0, 2.0) * s12 - s22;
		float2 sobelY = s00 + float2(2.0, 2.0) * s01 + s02 - s20 - float2(2.0, 2.0) * s21 - s22;

		float2 edgeSqr = (sobelX * sobelX + sobelY * sobelY);
		float sqr = edgeSqr.x * edgeSqr.x + edgeSqr.y * edgeSqr.y;

		if (sqr > 0.50)
		{
			//OUT.color = tex2D(original, texCoord) * float4(0.5, 0.5, 0.5, 1.0);
			OUT.color = float4(0.0, 0.0, 0.0, 1.0);
		}
		else
		{
			OUT.color = tex2D(original, texCoord);
			//OUT.color = float4(1.0, 1.0, 1.0, 1.0);
		}
	}
	else
	{
		//You are an edge
		OUT.color = tex2D(original, texCoord); //WHAT THE FUCK
	}    

	//OUT.color = float4(0.0, 0.0, 1.0, 1.0);

	OUT.color *= intensity;

	return OUT;
}

fragment nonEdgeDetection(fragment IN,
						  float2 texCoord : TEXCOORD0,
						  uniform sampler2D blurred : TEX0, //Blurred
						  uniform float size, //Box filter size
						  uniform float intensity, //How much bloom there is
						  uniform sampler2D original : TEX1) //Original
{
	fragment OUT;

	//BLURRED IS NO LOGNER THE BLURRED IMAGE
	//ITS ACTUALLY THE SECOND LAYER
	//I KNOW THATS RETARDED
	//IM SORRY.

	//OUT.color = tex2D(blurred, texCoord);
	OUT.color = tex2D(original, texCoord);
	//OUT.color = float4(1.0, 0.0, 1.0, 0.1);

	//temp += ; 

	//OUT.color = 
	//OUT.color += //WHAT THE FUCK
	OUT.color *= intensity;	

	return OUT;
}